// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GlueProtocol.proto

#ifndef PROTOBUF_GlueProtocol_2eproto__INCLUDED
#define PROTOBUF_GlueProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace tranzda {
namespace glue {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GlueProtocol_2eproto();
void protobuf_AssignDesc_GlueProtocol_2eproto();
void protobuf_ShutdownFile_GlueProtocol_2eproto();

class MsgGlue;
class MsgGlue_MsgResult;
class MsgGlue_MsgClipBoard;

// ===================================================================

class MsgGlue_MsgResult : public ::google::protobuf::Message {
 public:
  MsgGlue_MsgResult();
  virtual ~MsgGlue_MsgResult();

  MsgGlue_MsgResult(const MsgGlue_MsgResult& from);

  inline MsgGlue_MsgResult& operator=(const MsgGlue_MsgResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgGlue_MsgResult& default_instance();

  void Swap(MsgGlue_MsgResult* other);

  // implements Message ----------------------------------------------

  MsgGlue_MsgResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgGlue_MsgResult& from);
  void MergeFrom(const MsgGlue_MsgResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 param_int = 2 [default = 0];
  inline bool has_param_int() const;
  inline void clear_param_int();
  static const int kParamIntFieldNumber = 2;
  inline ::google::protobuf::int32 param_int() const;
  inline void set_param_int(::google::protobuf::int32 value);

  // optional string param_str = 3 [default = ""];
  inline bool has_param_str() const;
  inline void clear_param_str();
  static const int kParamStrFieldNumber = 3;
  inline const ::std::string& param_str() const;
  inline void set_param_str(const ::std::string& value);
  inline void set_param_str(const char* value);
  inline void set_param_str(const char* value, size_t size);
  inline ::std::string* mutable_param_str();
  inline ::std::string* release_param_str();
  inline void set_allocated_param_str(::std::string* param_str);

  // @@protoc_insertion_point(class_scope:com.tranzda.glue.MsgGlue.MsgResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_param_int();
  inline void clear_has_param_int();
  inline void set_has_param_str();
  inline void clear_has_param_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 param_int_;
  ::std::string* param_str_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GlueProtocol_2eproto();
  friend void protobuf_AssignDesc_GlueProtocol_2eproto();
  friend void protobuf_ShutdownFile_GlueProtocol_2eproto();

  void InitAsDefaultInstance();
  static MsgGlue_MsgResult* default_instance_;
};
// -------------------------------------------------------------------

class MsgGlue_MsgClipBoard : public ::google::protobuf::Message {
 public:
  MsgGlue_MsgClipBoard();
  virtual ~MsgGlue_MsgClipBoard();

  MsgGlue_MsgClipBoard(const MsgGlue_MsgClipBoard& from);

  inline MsgGlue_MsgClipBoard& operator=(const MsgGlue_MsgClipBoard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgGlue_MsgClipBoard& default_instance();

  void Swap(MsgGlue_MsgClipBoard* other);

  // implements Message ----------------------------------------------

  MsgGlue_MsgClipBoard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgGlue_MsgClipBoard& from);
  void MergeFrom(const MsgGlue_MsgClipBoard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional string title = 2 [default = ""];
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:com.tranzda.glue.MsgGlue.MsgClipBoard)
 private:
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_title();
  inline void clear_has_title();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;
  ::std::string* title_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GlueProtocol_2eproto();
  friend void protobuf_AssignDesc_GlueProtocol_2eproto();
  friend void protobuf_ShutdownFile_GlueProtocol_2eproto();

  void InitAsDefaultInstance();
  static MsgGlue_MsgClipBoard* default_instance_;
};
// -------------------------------------------------------------------

class MsgGlue : public ::google::protobuf::Message {
 public:
  MsgGlue();
  virtual ~MsgGlue();

  MsgGlue(const MsgGlue& from);

  inline MsgGlue& operator=(const MsgGlue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgGlue& default_instance();

  void Swap(MsgGlue* other);

  // implements Message ----------------------------------------------

  MsgGlue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgGlue& from);
  void MergeFrom(const MsgGlue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MsgGlue_MsgResult MsgResult;
  typedef MsgGlue_MsgClipBoard MsgClipBoard;

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional int32 method = 2 [default = 0];
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 2;
  inline ::google::protobuf::int32 method() const;
  inline void set_method(::google::protobuf::int32 value);

  // optional int32 seqno = 3 [default = 0];
  inline bool has_seqno() const;
  inline void clear_seqno();
  static const int kSeqnoFieldNumber = 3;
  inline ::google::protobuf::int32 seqno() const;
  inline void set_seqno(::google::protobuf::int32 value);

  // optional .com.tranzda.glue.MsgGlue.MsgClipBoard clipBoard = 4;
  inline bool has_clipboard() const;
  inline void clear_clipboard();
  static const int kClipBoardFieldNumber = 4;
  inline const ::com::tranzda::glue::MsgGlue_MsgClipBoard& clipboard() const;
  inline ::com::tranzda::glue::MsgGlue_MsgClipBoard* mutable_clipboard();
  inline ::com::tranzda::glue::MsgGlue_MsgClipBoard* release_clipboard();
  inline void set_allocated_clipboard(::com::tranzda::glue::MsgGlue_MsgClipBoard* clipboard);

  // optional .com.tranzda.glue.MsgGlue.MsgResult result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline const ::com::tranzda::glue::MsgGlue_MsgResult& result() const;
  inline ::com::tranzda::glue::MsgGlue_MsgResult* mutable_result();
  inline ::com::tranzda::glue::MsgGlue_MsgResult* release_result();
  inline void set_allocated_result(::com::tranzda::glue::MsgGlue_MsgResult* result);

  // @@protoc_insertion_point(class_scope:com.tranzda.glue.MsgGlue)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_seqno();
  inline void clear_has_seqno();
  inline void set_has_clipboard();
  inline void clear_has_clipboard();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  ::google::protobuf::int32 method_;
  ::google::protobuf::int32 seqno_;
  ::com::tranzda::glue::MsgGlue_MsgClipBoard* clipboard_;
  ::com::tranzda::glue::MsgGlue_MsgResult* result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_GlueProtocol_2eproto();
  friend void protobuf_AssignDesc_GlueProtocol_2eproto();
  friend void protobuf_ShutdownFile_GlueProtocol_2eproto();

  void InitAsDefaultInstance();
  static MsgGlue* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgGlue_MsgResult

// required int32 result = 1;
inline bool MsgGlue_MsgResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgGlue_MsgResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgGlue_MsgResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgGlue_MsgResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 MsgGlue_MsgResult::result() const {
  return result_;
}
inline void MsgGlue_MsgResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 param_int = 2 [default = 0];
inline bool MsgGlue_MsgResult::has_param_int() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgGlue_MsgResult::set_has_param_int() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgGlue_MsgResult::clear_has_param_int() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgGlue_MsgResult::clear_param_int() {
  param_int_ = 0;
  clear_has_param_int();
}
inline ::google::protobuf::int32 MsgGlue_MsgResult::param_int() const {
  return param_int_;
}
inline void MsgGlue_MsgResult::set_param_int(::google::protobuf::int32 value) {
  set_has_param_int();
  param_int_ = value;
}

// optional string param_str = 3 [default = ""];
inline bool MsgGlue_MsgResult::has_param_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgGlue_MsgResult::set_has_param_str() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgGlue_MsgResult::clear_has_param_str() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgGlue_MsgResult::clear_param_str() {
  if (param_str_ != &::google::protobuf::internal::kEmptyString) {
    param_str_->clear();
  }
  clear_has_param_str();
}
inline const ::std::string& MsgGlue_MsgResult::param_str() const {
  return *param_str_;
}
inline void MsgGlue_MsgResult::set_param_str(const ::std::string& value) {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::kEmptyString) {
    param_str_ = new ::std::string;
  }
  param_str_->assign(value);
}
inline void MsgGlue_MsgResult::set_param_str(const char* value) {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::kEmptyString) {
    param_str_ = new ::std::string;
  }
  param_str_->assign(value);
}
inline void MsgGlue_MsgResult::set_param_str(const char* value, size_t size) {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::kEmptyString) {
    param_str_ = new ::std::string;
  }
  param_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgGlue_MsgResult::mutable_param_str() {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::kEmptyString) {
    param_str_ = new ::std::string;
  }
  return param_str_;
}
inline ::std::string* MsgGlue_MsgResult::release_param_str() {
  clear_has_param_str();
  if (param_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param_str_;
    param_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgGlue_MsgResult::set_allocated_param_str(::std::string* param_str) {
  if (param_str_ != &::google::protobuf::internal::kEmptyString) {
    delete param_str_;
  }
  if (param_str) {
    set_has_param_str();
    param_str_ = param_str;
  } else {
    clear_has_param_str();
    param_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MsgGlue_MsgClipBoard

// required string text = 1;
inline bool MsgGlue_MsgClipBoard::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgGlue_MsgClipBoard::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgGlue_MsgClipBoard::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgGlue_MsgClipBoard::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& MsgGlue_MsgClipBoard::text() const {
  return *text_;
}
inline void MsgGlue_MsgClipBoard::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void MsgGlue_MsgClipBoard::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void MsgGlue_MsgClipBoard::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgGlue_MsgClipBoard::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* MsgGlue_MsgClipBoard::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgGlue_MsgClipBoard::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string title = 2 [default = ""];
inline bool MsgGlue_MsgClipBoard::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgGlue_MsgClipBoard::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgGlue_MsgClipBoard::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgGlue_MsgClipBoard::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& MsgGlue_MsgClipBoard::title() const {
  return *title_;
}
inline void MsgGlue_MsgClipBoard::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void MsgGlue_MsgClipBoard::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void MsgGlue_MsgClipBoard::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgGlue_MsgClipBoard::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* MsgGlue_MsgClipBoard::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgGlue_MsgClipBoard::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MsgGlue

// required string type = 1;
inline bool MsgGlue::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgGlue::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgGlue::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgGlue::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& MsgGlue::type() const {
  return *type_;
}
inline void MsgGlue::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void MsgGlue::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void MsgGlue::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgGlue::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* MsgGlue::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgGlue::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 method = 2 [default = 0];
inline bool MsgGlue::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgGlue::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgGlue::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgGlue::clear_method() {
  method_ = 0;
  clear_has_method();
}
inline ::google::protobuf::int32 MsgGlue::method() const {
  return method_;
}
inline void MsgGlue::set_method(::google::protobuf::int32 value) {
  set_has_method();
  method_ = value;
}

// optional int32 seqno = 3 [default = 0];
inline bool MsgGlue::has_seqno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgGlue::set_has_seqno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgGlue::clear_has_seqno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgGlue::clear_seqno() {
  seqno_ = 0;
  clear_has_seqno();
}
inline ::google::protobuf::int32 MsgGlue::seqno() const {
  return seqno_;
}
inline void MsgGlue::set_seqno(::google::protobuf::int32 value) {
  set_has_seqno();
  seqno_ = value;
}

// optional .com.tranzda.glue.MsgGlue.MsgClipBoard clipBoard = 4;
inline bool MsgGlue::has_clipboard() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgGlue::set_has_clipboard() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgGlue::clear_has_clipboard() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgGlue::clear_clipboard() {
  if (clipboard_ != NULL) clipboard_->::com::tranzda::glue::MsgGlue_MsgClipBoard::Clear();
  clear_has_clipboard();
}
inline const ::com::tranzda::glue::MsgGlue_MsgClipBoard& MsgGlue::clipboard() const {
  return clipboard_ != NULL ? *clipboard_ : *default_instance_->clipboard_;
}
inline ::com::tranzda::glue::MsgGlue_MsgClipBoard* MsgGlue::mutable_clipboard() {
  set_has_clipboard();
  if (clipboard_ == NULL) clipboard_ = new ::com::tranzda::glue::MsgGlue_MsgClipBoard;
  return clipboard_;
}
inline ::com::tranzda::glue::MsgGlue_MsgClipBoard* MsgGlue::release_clipboard() {
  clear_has_clipboard();
  ::com::tranzda::glue::MsgGlue_MsgClipBoard* temp = clipboard_;
  clipboard_ = NULL;
  return temp;
}
inline void MsgGlue::set_allocated_clipboard(::com::tranzda::glue::MsgGlue_MsgClipBoard* clipboard) {
  delete clipboard_;
  clipboard_ = clipboard;
  if (clipboard) {
    set_has_clipboard();
  } else {
    clear_has_clipboard();
  }
}

// optional .com.tranzda.glue.MsgGlue.MsgResult result = 5;
inline bool MsgGlue::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgGlue::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgGlue::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgGlue::clear_result() {
  if (result_ != NULL) result_->::com::tranzda::glue::MsgGlue_MsgResult::Clear();
  clear_has_result();
}
inline const ::com::tranzda::glue::MsgGlue_MsgResult& MsgGlue::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::com::tranzda::glue::MsgGlue_MsgResult* MsgGlue::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::com::tranzda::glue::MsgGlue_MsgResult;
  return result_;
}
inline ::com::tranzda::glue::MsgGlue_MsgResult* MsgGlue::release_result() {
  clear_has_result();
  ::com::tranzda::glue::MsgGlue_MsgResult* temp = result_;
  result_ = NULL;
  return temp;
}
inline void MsgGlue::set_allocated_result(::com::tranzda::glue::MsgGlue_MsgResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace glue
}  // namespace tranzda
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GlueProtocol_2eproto__INCLUDED
