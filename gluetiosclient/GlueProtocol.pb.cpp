// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GlueProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GlueProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace tranzda {
namespace glue {

namespace {

const ::google::protobuf::Descriptor* MsgGlue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGlue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGlue_MsgResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGlue_MsgResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGlue_MsgClipBoard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGlue_MsgClipBoard_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GlueProtocol_2eproto() {
  protobuf_AddDesc_GlueProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GlueProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  MsgGlue_descriptor_ = file->message_type(0);
  static const int MsgGlue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGlue, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGlue, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGlue, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGlue, clipboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGlue, result_),
  };
  MsgGlue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGlue_descriptor_,
      MsgGlue::default_instance_,
      MsgGlue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGlue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGlue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGlue));
  MsgGlue_MsgResult_descriptor_ = MsgGlue_descriptor_->nested_type(0);
  static const int MsgGlue_MsgResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGlue_MsgResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGlue_MsgResult, param_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGlue_MsgResult, param_str_),
  };
  MsgGlue_MsgResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGlue_MsgResult_descriptor_,
      MsgGlue_MsgResult::default_instance_,
      MsgGlue_MsgResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGlue_MsgResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGlue_MsgResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGlue_MsgResult));
  MsgGlue_MsgClipBoard_descriptor_ = MsgGlue_descriptor_->nested_type(1);
  static const int MsgGlue_MsgClipBoard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGlue_MsgClipBoard, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGlue_MsgClipBoard, title_),
  };
  MsgGlue_MsgClipBoard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGlue_MsgClipBoard_descriptor_,
      MsgGlue_MsgClipBoard::default_instance_,
      MsgGlue_MsgClipBoard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGlue_MsgClipBoard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGlue_MsgClipBoard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGlue_MsgClipBoard));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GlueProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGlue_descriptor_, &MsgGlue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGlue_MsgResult_descriptor_, &MsgGlue_MsgResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGlue_MsgClipBoard_descriptor_, &MsgGlue_MsgClipBoard::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GlueProtocol_2eproto() {
  delete MsgGlue::default_instance_;
  delete MsgGlue_reflection_;
  delete MsgGlue_MsgResult::default_instance_;
  delete MsgGlue_MsgResult_reflection_;
  delete MsgGlue_MsgClipBoard::default_instance_;
  delete MsgGlue_MsgClipBoard_reflection_;
}

void protobuf_AddDesc_GlueProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022GlueProtocol.proto\022\020com.tranzda.glue\"\243"
    "\002\n\007MsgGlue\022\014\n\004type\030\001 \002(\t\022\021\n\006method\030\002 \001(\005"
    ":\0010\022\020\n\005seqno\030\003 \001(\005:\0010\0229\n\tclipBoard\030\004 \001(\013"
    "2&.com.tranzda.glue.MsgGlue.MsgClipBoard"
    "\0223\n\006result\030\005 \001(\0132#.com.tranzda.glue.MsgG"
    "lue.MsgResult\032F\n\tMsgResult\022\016\n\006result\030\001 \002"
    "(\005\022\024\n\tparam_int\030\002 \001(\005:\0010\022\023\n\tparam_str\030\003 "
    "\001(\t:\000\032-\n\014MsgClipBoard\022\014\n\004text\030\001 \002(\t\022\017\n\005t"
    "itle\030\002 \001(\t:\000", 332);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GlueProtocol.proto", &protobuf_RegisterTypes);
  MsgGlue::default_instance_ = new MsgGlue();
  MsgGlue_MsgResult::default_instance_ = new MsgGlue_MsgResult();
  MsgGlue_MsgClipBoard::default_instance_ = new MsgGlue_MsgClipBoard();
  MsgGlue::default_instance_->InitAsDefaultInstance();
  MsgGlue_MsgResult::default_instance_->InitAsDefaultInstance();
  MsgGlue_MsgClipBoard::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GlueProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GlueProtocol_2eproto {
  StaticDescriptorInitializer_GlueProtocol_2eproto() {
    protobuf_AddDesc_GlueProtocol_2eproto();
  }
} static_descriptor_initializer_GlueProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgGlue_MsgResult::kResultFieldNumber;
const int MsgGlue_MsgResult::kParamIntFieldNumber;
const int MsgGlue_MsgResult::kParamStrFieldNumber;
#endif  // !_MSC_VER

MsgGlue_MsgResult::MsgGlue_MsgResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgGlue_MsgResult::InitAsDefaultInstance() {
}

MsgGlue_MsgResult::MsgGlue_MsgResult(const MsgGlue_MsgResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgGlue_MsgResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  param_int_ = 0;
  param_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGlue_MsgResult::~MsgGlue_MsgResult() {
  SharedDtor();
}

void MsgGlue_MsgResult::SharedDtor() {
  if (param_str_ != &::google::protobuf::internal::kEmptyString) {
    delete param_str_;
  }
  if (this != default_instance_) {
  }
}

void MsgGlue_MsgResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGlue_MsgResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGlue_MsgResult_descriptor_;
}

const MsgGlue_MsgResult& MsgGlue_MsgResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GlueProtocol_2eproto();
  return *default_instance_;
}

MsgGlue_MsgResult* MsgGlue_MsgResult::default_instance_ = NULL;

MsgGlue_MsgResult* MsgGlue_MsgResult::New() const {
  return new MsgGlue_MsgResult;
}

void MsgGlue_MsgResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    param_int_ = 0;
    if (has_param_str()) {
      if (param_str_ != &::google::protobuf::internal::kEmptyString) {
        param_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGlue_MsgResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param_int;
        break;
      }

      // optional int32 param_int = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_int_)));
          set_has_param_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_param_str;
        break;
      }

      // optional string param_str = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param_str().data(), this->param_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGlue_MsgResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 param_int = 2 [default = 0];
  if (has_param_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->param_int(), output);
  }

  // optional string param_str = 3 [default = ""];
  if (has_param_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param_str().data(), this->param_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->param_str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGlue_MsgResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 param_int = 2 [default = 0];
  if (has_param_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->param_int(), target);
  }

  // optional string param_str = 3 [default = ""];
  if (has_param_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param_str().data(), this->param_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->param_str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGlue_MsgResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 param_int = 2 [default = 0];
    if (has_param_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_int());
    }

    // optional string param_str = 3 [default = ""];
    if (has_param_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param_str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGlue_MsgResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGlue_MsgResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGlue_MsgResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGlue_MsgResult::MergeFrom(const MsgGlue_MsgResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_param_int()) {
      set_param_int(from.param_int());
    }
    if (from.has_param_str()) {
      set_param_str(from.param_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGlue_MsgResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGlue_MsgResult::CopyFrom(const MsgGlue_MsgResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGlue_MsgResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgGlue_MsgResult::Swap(MsgGlue_MsgResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(param_int_, other->param_int_);
    std::swap(param_str_, other->param_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGlue_MsgResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGlue_MsgResult_descriptor_;
  metadata.reflection = MsgGlue_MsgResult_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgGlue_MsgClipBoard::kTextFieldNumber;
const int MsgGlue_MsgClipBoard::kTitleFieldNumber;
#endif  // !_MSC_VER

MsgGlue_MsgClipBoard::MsgGlue_MsgClipBoard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgGlue_MsgClipBoard::InitAsDefaultInstance() {
}

MsgGlue_MsgClipBoard::MsgGlue_MsgClipBoard(const MsgGlue_MsgClipBoard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgGlue_MsgClipBoard::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGlue_MsgClipBoard::~MsgGlue_MsgClipBoard() {
  SharedDtor();
}

void MsgGlue_MsgClipBoard::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void MsgGlue_MsgClipBoard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGlue_MsgClipBoard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGlue_MsgClipBoard_descriptor_;
}

const MsgGlue_MsgClipBoard& MsgGlue_MsgClipBoard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GlueProtocol_2eproto();
  return *default_instance_;
}

MsgGlue_MsgClipBoard* MsgGlue_MsgClipBoard::default_instance_ = NULL;

MsgGlue_MsgClipBoard* MsgGlue_MsgClipBoard::New() const {
  return new MsgGlue_MsgClipBoard;
}

void MsgGlue_MsgClipBoard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGlue_MsgClipBoard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGlue_MsgClipBoard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  // optional string title = 2 [default = ""];
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGlue_MsgClipBoard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional string title = 2 [default = ""];
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGlue_MsgClipBoard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string title = 2 [default = ""];
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGlue_MsgClipBoard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGlue_MsgClipBoard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGlue_MsgClipBoard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGlue_MsgClipBoard::MergeFrom(const MsgGlue_MsgClipBoard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGlue_MsgClipBoard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGlue_MsgClipBoard::CopyFrom(const MsgGlue_MsgClipBoard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGlue_MsgClipBoard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgGlue_MsgClipBoard::Swap(MsgGlue_MsgClipBoard* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGlue_MsgClipBoard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGlue_MsgClipBoard_descriptor_;
  metadata.reflection = MsgGlue_MsgClipBoard_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgGlue::kTypeFieldNumber;
const int MsgGlue::kMethodFieldNumber;
const int MsgGlue::kSeqnoFieldNumber;
const int MsgGlue::kClipBoardFieldNumber;
const int MsgGlue::kResultFieldNumber;
#endif  // !_MSC_VER

MsgGlue::MsgGlue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgGlue::InitAsDefaultInstance() {
  clipboard_ = const_cast< ::com::tranzda::glue::MsgGlue_MsgClipBoard*>(&::com::tranzda::glue::MsgGlue_MsgClipBoard::default_instance());
  result_ = const_cast< ::com::tranzda::glue::MsgGlue_MsgResult*>(&::com::tranzda::glue::MsgGlue_MsgResult::default_instance());
}

MsgGlue::MsgGlue(const MsgGlue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgGlue::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  method_ = 0;
  seqno_ = 0;
  clipboard_ = NULL;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGlue::~MsgGlue() {
  SharedDtor();
}

void MsgGlue::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
    delete clipboard_;
    delete result_;
  }
}

void MsgGlue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGlue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGlue_descriptor_;
}

const MsgGlue& MsgGlue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GlueProtocol_2eproto();
  return *default_instance_;
}

MsgGlue* MsgGlue::default_instance_ = NULL;

MsgGlue* MsgGlue::New() const {
  return new MsgGlue;
}

void MsgGlue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    method_ = 0;
    seqno_ = 0;
    if (has_clipboard()) {
      if (clipboard_ != NULL) clipboard_->::com::tranzda::glue::MsgGlue_MsgClipBoard::Clear();
    }
    if (has_result()) {
      if (result_ != NULL) result_->::com::tranzda::glue::MsgGlue_MsgResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGlue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_method;
        break;
      }

      // optional int32 method = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
          set_has_method();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seqno;
        break;
      }

      // optional int32 seqno = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_clipBoard;
        break;
      }

      // optional .com.tranzda.glue.MsgGlue.MsgClipBoard clipBoard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clipBoard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clipboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_result;
        break;
      }

      // optional .com.tranzda.glue.MsgGlue.MsgResult result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGlue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }

  // optional int32 method = 2 [default = 0];
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->method(), output);
  }

  // optional int32 seqno = 3 [default = 0];
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seqno(), output);
  }

  // optional .com.tranzda.glue.MsgGlue.MsgClipBoard clipBoard = 4;
  if (has_clipboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->clipboard(), output);
  }

  // optional .com.tranzda.glue.MsgGlue.MsgResult result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGlue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional int32 method = 2 [default = 0];
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->method(), target);
  }

  // optional int32 seqno = 3 [default = 0];
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seqno(), target);
  }

  // optional .com.tranzda.glue.MsgGlue.MsgClipBoard clipBoard = 4;
  if (has_clipboard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->clipboard(), target);
  }

  // optional .com.tranzda.glue.MsgGlue.MsgResult result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGlue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int32 method = 2 [default = 0];
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->method());
    }

    // optional int32 seqno = 3 [default = 0];
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqno());
    }

    // optional .com.tranzda.glue.MsgGlue.MsgClipBoard clipBoard = 4;
    if (has_clipboard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clipboard());
    }

    // optional .com.tranzda.glue.MsgGlue.MsgResult result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGlue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGlue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGlue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGlue::MergeFrom(const MsgGlue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_clipboard()) {
      mutable_clipboard()->::com::tranzda::glue::MsgGlue_MsgClipBoard::MergeFrom(from.clipboard());
    }
    if (from.has_result()) {
      mutable_result()->::com::tranzda::glue::MsgGlue_MsgResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGlue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGlue::CopyFrom(const MsgGlue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGlue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_clipboard()) {
    if (!this->clipboard().IsInitialized()) return false;
  }
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void MsgGlue::Swap(MsgGlue* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(method_, other->method_);
    std::swap(seqno_, other->seqno_);
    std::swap(clipboard_, other->clipboard_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGlue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGlue_descriptor_;
  metadata.reflection = MsgGlue_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace glue
}  // namespace tranzda
}  // namespace com

// @@protoc_insertion_point(global_scope)
